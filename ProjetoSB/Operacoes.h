//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : ProjetoSB
//  @ File Name : Operacoes.h
//  @ Date : 09/01/2013
//  @ Author : Willian
//
//


#ifndef _OPERACOES_H
#define _OPERACOES_H

#include "ItemOperacao.h"
#include "Registradores.h"

#include <string>
#include <list>
#include <map>
#include <iterator>
#include <exception>
#include <sstream>
#include <stdexcept>

using namespace std;

static const map<string,ItemOperacao> montaOperacoes () {
	map<string,ItemOperacao> mapOp;
//	mapOp["add"] = {"add", R, "000000", "010000", "x"};
//	mapOp["sub"] = {"sub", R, "000000", "010010", "x"};
	mapOp["add.s"] = {"add.s", FR, "010001", "000000", "10000"};
	mapOp["add.d"] = {"add.d", FR, "010001", "000001", "10001"};
	mapOp["sub.s"] = {"sub.s", FR, "010001", "000000", "10000"};
	mapOp["sub.d"] = {"sub.d", FR, "010001", "000001", "10001"};
	mapOp["nullOp"] = {"x", NULLOP, "x", "x", "x"};
	mapOp["j"] = {"j", J, "\0", "\0", "\0"};
	return mapOp;
}

static const map<string,ItemOperacao> listaOperacao = montaOperacoes();


//static const struct ItemOperacao add = listaOperacao.find("add")->second;
//static const struct ItemOperacao sub = listaOperacao.find("sub")->second;
static const struct ItemOperacao adds = listaOperacao.find("add.s")->second;
static const struct ItemOperacao addd = listaOperacao.find("add.d")->second;
static const struct ItemOperacao subs = listaOperacao.find("sub.s")->second;
static const struct ItemOperacao subd = listaOperacao.find("sub.d")->second;
static const struct ItemOperacao j = listaOperacao.find("j")->second;
static const struct ItemOperacao nullOp = listaOperacao.find("nullOp")->second;
//static const struct ItemOperacao label = listaOperacao.find("label")->second;

class Operacao {
public:
	virtual ~Operacao() {}
	//Verifica se o nome da operacao e igual ao da entrada
	bool verifica_nome(string nome_operacao);
	//Verifica se o label da operacao e igual ao da entrada
	bool verifica_label(string label);

protected:
	ItemOperacao operacao;
	virtual string conversaoBinaria() {return NULL;};
	virtual string conversaoJump(int Endereco) {return NULL;};
};

class OperacaoBinaria:public Operacao {
public:
	OperacaoBinaria (list<string> tokens) throw (runtime_error);
	string conversaoBinaria() throw (runtime_error);
private:
	void montaRegistradoresR(string& saida) throw (runtime_error);
};

//class OperacaoLabel:public Operacao {
//public:
//	string conversaoBinaria();
//private:
//	Operacao operacao;
//	string label;
//	string linha;
//};

class OperacaoJump:public Operacao {
public:
	OperacaoJump (list<string> tokens, int Endereco) throw (runtime_error);
private:
	string conversaoJump(int Endereco);
	string conversao_int_binario(int Endereco);
};

ItemOperacao encontraOperacao(string nomeOperacao);

#endif  //_OPERACOES_H
