//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : ProjetoSB
//  @ File Name : Operacoes.h
//  @ Date : 09/01/2013
//  @ Author : Willian
//
//


#ifndef _OPERACOES_H
#define _OPERACOES_H

#include "ItemOperacao.h"
#include "Registradores.h"

#include <string>
#include <list>
#include <map>
#include <iterator>
#include <exception>
#include <sstream>
#include <stdexcept>

using namespace std;

static const map<string,ItemOperacao> montaOperacoes () {
	map<string,ItemOperacao> mapOp;
	mapOp["add"] = {"add", R, "000000", "010000", "x"};
	mapOp["sub"] = {"sub", R, "000000", "010010", "x"};
	mapOp["adds"] = {"add.s", FR, "010001", "000000", "10000"};
	mapOp["addd"] = {"add.d", FR, "010001", "000001", "10001"};
	mapOp["subs"] = {"sub.s", FR, "010001", "000000", "10000"};
	mapOp["subd"] = {"sub.d", FR, "010001", "000001", "10001"};
	mapOp["label"] = {"x", LABEL, "x", "x", "x"};
	return mapOp;
}

static const map<string,ItemOperacao> listaOperacao = montaOperacoes();


static const struct ItemOperacao add = listaOperacao.find("add")->second;
static const struct ItemOperacao sub = listaOperacao.find("sub")->second;
static const struct ItemOperacao adds = listaOperacao.find("adds")->second;
static const struct ItemOperacao addd = listaOperacao.find("addd")->second;
static const struct ItemOperacao subs = listaOperacao.find("subs")->second;
static const struct ItemOperacao subd = listaOperacao.find("subd")->second;
static const struct ItemOperacao label = listaOperacao.find("label")->second;

class Operacao {
public:
	ItemOperacao tipoOperacao;
	virtual ~Operacao() {}
	virtual string conversaoBinaria() {return NULL;};
};

class OperacaoLabel:Operacao {
public:
	string conversaoBinaria();
private:
	Operacao operacao;
	string label;
	string linha;
};

class OperacaoJump:Operacao {
public:
	virtual string conversaoBinaria();
private:
	string linha;
};

class OperacaoBinaria:Operacao {
public:
	OperacaoBinaria (list<string> tokens);
	string conversaoBinaria();
private:
	ItemOperacao operacao;
	string rs;
	string rt;
	string rd;
	void montaRegistradoresR(string& saida);
};

ItemOperacao encontraOperacao(string nomeOperacao);

#endif  //_OPERACOES_H
