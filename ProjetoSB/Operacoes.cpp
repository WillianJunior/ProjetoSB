//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : ProjetoSB
//  @ File Name : Operacoes.cpp
//  @ Date : 09/01/2013
//  @ Author : Willian
//
//


#include "Operacoes.h"

OperacaoBinaria::OperacaoBinaria (list<string> tokens) throw (runtime_error) {

	operacao = encontraOperacao(tokens.front());
	tokens.pop_front();
	rd = tokens.front();
	tokens.pop_front();
	rs = tokens.front();
	tokens.pop_front();
	rt = tokens.front();
}

void OperacaoBinaria::montaRegistradoresR(string& saida) throw (runtime_error) {
	ItemRegistrador irs, irt, ird;
	if (!(irs = encontraRegistrador(rs)).codigo.compare(none.codigo)
			|| !(irt = encontraRegistrador(rt)).codigo.compare(none.codigo)
			|| !(ird = encontraRegistrador(rd)).codigo.compare(none.codigo))
		throw runtime_error("registradores inexistentes");

	saida += irs.codigo;
	saida += irt.codigo;
	saida += ird.codigo;
}

string OperacaoBinaria::conversaoBinaria() throw (runtime_error) {
	string saida;
	switch (operacao.tipo) {
	case FR:
		saida = operacao.opcode;
		saida += operacao.fmt;
		montaRegistradoresR(saida);
		saida += operacao.funct;
		break;
//	case R:
//		saida = operacao.opcode;
//		montaRegistradoresR(saida);
//		saida += "000000"; // TODO melhorar para incorporar o shamt
//		saida += operacao.funct;
//		break;
	default:
		throw runtime_error("operação não implementada para operação binaria");
	}
	return saida;
}

ItemOperacao encontraOperacao(string nomeOperacao) {
	map<string,ItemOperacao>::const_iterator temp = listaOperacao.find(nomeOperacao);
	return temp != listaOperacao.end() ? temp->second : nullOp;
}

